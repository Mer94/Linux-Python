"""
Дополнить проект фикстурой, которая после каждого шага теста дописывает в заранее созданный файл stat.txt строку вида:
время, кол-во файлов из конфига, размер файла из конфига, статистика загрузки процессора из файла /proc/loadavg (можно писать просто всё содержимое этого файла).
"""

import pytest
from checkout import *
import yaml
import time
import random
import string

with open('config.yml', 'r', encoding='utf-8') as f:
    data = yaml.safe_load(f)
FOLDER_TST = data["FOLDER_TST"]
FOLDER_OUT = data["FOLDER_OUT"]
FOLDER_folder1 = data["FOLDER_folder1"]

# Функция для записи статистики в файл stat.txt
def write_stat(num_files, file_size):
    loadavg = open("/proc/loadavg").read().strip()
    with open("stat.txt", "a") as stat_file:
        stat_file.write(f"Время: {time.strftime('%Y-%m-%d %H:%M:%S')}\n")
        stat_file.write(f"Количество файлов из конфига: {num_files}\n")
        stat_file.write(f"Размер файла из конфига: {file_size}\n")
        stat_file.write(f"Статистика загрузки процессора:\n{loadavg}\n")
        stat_file.write("=" * 40 + "\n")

# Создаем фикстуры для подготовки окружения и записи статистики
@pytest.fixture
def clear_dir():
    return checkout(f'rm -rf {FOLDER_OUT} {FOLDER_TST} {FOLDER_folder1}',"")

@pytest.fixture
def get_dir():
    return checkout(f'mkdir {FOLDER_OUT} {FOLDER_TST} {FOLDER_folder1}',"")

@pytest.fixture
def make_files():
    list_files = []
    for i in range(data['count']):
        filename = ''.join(random.choices(string.ascii_letters + string.digits))
        if checkout(
                f'cd {FOLDER_TST}; dd if=/dev/urandom of={filename} bs={data["size"]} count={data["count"]} iflag=fullblock',
                ""):
            list_files.append(filename)

    num_files = len(list_files)
    file_size = f"{data['size']} bytes"
    yield num_files, file_size

    write_stat(num_files, file_size)


def test_step1(clear_dir, get_dir, make_files):
    res1 = checkout(f"cd {FOLDER_TST}; 7z a {FOLDER_OUT}/arx2", "OK")
    res2 = checkout(f"ls {FOLDER_OUT}", "arx2.7z")
    assert res1 and res2, "FAIL"

def test_step2(clear_dir, get_dir, make_files, start_time):
    res = []
    res.append(checkout(f"cd {FOLDER_TST}; 7z a {FOLDER_OUT}/arx2", "OK"))
    res.append(checkout(f"cd {FOLDER_OUT}; 7z e arx2.7z -o {FOLDER_folder1} -y", "OK"))
    for i in make_files:
        res.append(checkout(f"ls {FOLDER_folder1}", i))
    assert all(res), "test2 FAIL"

def test_step3():
    assert checkout(f"cd {FOLDER_OUT}; 7z t arx2.7z", "OK"), "test3 FAIL"
    write_stat(0, 0)

def test_step4(get_list):
    assert checkout(f"cd {FOLDER_OUT}; 7z d arx2.7z {get_list[0]}", "OK"), "test4 FAIL"
    write_stat(0, 0)

def test_step5(get_list):
    assert (f"cd {FOLDER_TST}; echo 'Hello' >> {get_list[1]}; cd {FOLDER_OUT} 7z u arx2.7z"
            f"{FOLDER_TST}/{get_list[1]}", "OK"), "test5 FAIL"
    write_stat(0, 0)


